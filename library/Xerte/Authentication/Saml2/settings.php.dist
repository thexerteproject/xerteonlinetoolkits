<?php

$host = $_SERVER['HTTP_HOST'];
$protocol=$_SERVER['PROTOCOL'] = isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS']) ? 'https' : 'http';


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SIMPLE CONFIGURATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Change this basURL if the Xerte installation is placed in a subfolder.
$spBaseUrl = "$protocol://$host/library/Xerte/Authentication/Saml2"; //or http://<your_domain>

// Configure IdP data
$idpMetadataUrl = ''; // Url to the metadata of your IdP

// Part of the SP configuration
// These are the mandatory parts
// If you want to change the name and description of the SP, plase see below.
$spTechnicalGivenName = 'Technical Contact';
$spTechnicalEmailAddress = "info@$host";
$spSupportGivenName = 'Support Contact';
$spSupportEmailAddress = "info@$host";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END OF SIMPLE CONFIGURATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DEBUGGING AND LOGGING
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set $sso_logging to true to enable logging

global $sso_logging;
$sso_logging=false;

// Set the location of the logfile
define('XOT_SSO_LOGFILE', dirname(__FILE__) . '/../../../../error_logs/sso.log');

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END OF DEBUGGING AND LOGGING
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//
$settingsInfoArray = array (
    // If 'strict' is True, then the PHP Toolkit will reject unsigned
    // or unencrypted messages if it expects them signed or encrypted
    // Also will reject the messages if not strictly follow the SAML
    // standard: Destination, NameId, Conditions ... are validated too.
    'strict' => false,

    // Enable debug mode (to print errors)
    'debug' => false,

    // Service Provider Data that we are deploying
    'sp' => array (
        // Identifier of the SP entity  (must be a URI)
        'entityId' => $spBaseUrl . '/endpoints/metadata.php',
        // Specifies info about where and how the <AuthnResponse> message MUST be
        // returned to the requester, in this case our SP.
        'assertionConsumerService' => array (
            // URL Location where the <Response> from the IdP will be returned
            'url' => $spBaseUrl . '/endpoints/acs.php',
            // SAML protocol binding to be used when returning the <Response>
            // message.  Onelogin Toolkit supports for this endpoint the
            // HTTP-Redirect binding only
            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',
        ),
        // If you need to specify requested attributes, set a
        // attributeConsumingService. nameFormat, attributeValue and
        // friendlyName can be omitted
        "attributeConsumingService"=> array(
            "serviceName" => "Xerte Online Toolkits",
            "serviceDescription" => "Xerte Online Toolkits",
            "requestedAttributes" => array(
                array(
                    "name" => "urn:oid:0.9.2342.19200300.100.1.1",
                    "isRequired" => true,
                    "nameFormat" => "urn:oasis:names:tc:SAML:2.0:attrname-format:uri",
                    "friendlyName" => "uid"
                ),
                array(
                    "name" => "urn:oid:2.5.4.42",
                    "isRequired" => true,
                    "nameFormat" => "urn:oasis:names:tc:SAML:2.0:attrname-format:uri",
                    "friendlyName" => "givenName"
                ),
                array(
                    "name" => "urn:oid:2.5.4.4",
                    "isRequired" => true,
                    "nameFormat" => "urn:oasis:names:tc:SAML:2.0:attrname-format:uri",
                    "friendlyName" => "sn"
                ),
                array(
                    "name" => "urn:oid:1.3.6.1.4.1.25178.1.2.9",
                    "isRequired" => false,
                    "nameFormat" => "urn:oasis:names:tc:SAML:2.0:attrname-format:uri",
                    "friendlyName" => "organisation"
                ),
            )
        ),
        // Specifies info about where and how the <Logout Response> message MUST be
        // returned to the requester, in this case our SP.
        'singleLogoutService' => array (
            // URL Location where the <Response> from the IdP will be returned
            'url' => $spBaseUrl . '/endpoints/sls.php',
            // SAML protocol binding to be used when returning the <Response>
            // message.  Onelogin Toolkit supports for this endpoint the
            // HTTP-Redirect binding only
            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',
        ),
        // Specifies constraints on the name identifier to be used to
        // represent the requested subject.
        // Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
        'NameIDFormat' => 'urn:oasis:names:tc:SAML:2.0:nameid-format:persistent',
        // 'NameIDFormat' => 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress',
        // 'NameIDFormat' => 'urn:oasis:names:tc:SAML:2.0:nameid-format:entity',

        // Usually x509cert and privateKey of the SP are provided by files placed at
        // the certs folder. But we can also provide them with the following parameters
        //'x509cert' => '',
        //'privateKey' > '',

    ),
        // Security settings
    'security' => array (

        /** signatures and encryptions offered */

        // Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
        // will be encrypted.
        'nameIdEncrypted' => false,

        // Indicates whether the <samlp:AuthnRequest> messages sent by this SP
        // will be signed.              [The Metadata of the SP will offer this info]
        'authnRequestsSigned' => false,

        // Indicates whether the <samlp:logoutRequest> messages sent by this SP
        // will be signed.
        'logoutRequestSigned' => false,

        // Indicates whether the <samlp:logoutResponse> messages sent by this SP
        // will be signed.
        'logoutResponseSigned' => false,

        /* Sign the Metadata
         False || True (use sp certs) || array (
                                                    keyFileName => 'metadata.key',
                                                    certFileName => 'metadata.crt'
                                                )
        */
        'signMetadata' => false,


        /** signatures and encryptions required **/

        // Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
        // <samlp:LogoutResponse> elements received by this SP to be signed.
        'wantMessagesSigned' => false,

        // Indicates a requirement for the <saml:Assertion> elements received by
        // this SP to be signed.        [The Metadata of the SP will offer this info]
        'wantAssertionsSigned' => false,

        // Indicates a requirement for the NameID received by
        // this SP to be encrypted.
        'wantNameIdEncrypted' => false,

        // Authentication context.
        // Set to false and no AuthContext will be sent in the AuthNRequest,
        // Set true or don't present thi parameter and you will get an AuthContext 'exact' 'urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport'
        // Set an array with the possible auth context values: array ('urn:oasis:names:tc:SAML:2.0:ac:classes:Password', 'urn:oasis:names:tc:SAML:2.0:ac:classes:X509'),
        'requestedAuthnContext' => true,
    ),

    // Contact information template, it is recommended to suply a technical and support contacts
    'contactPerson' => array (
        'technical' => array (
            'givenName' => $spTechnicalGivenName,
            'emailAddress' => $spTechnicalEmailAddress
        ),
        'support' => array (
            'givenName' => $spSupportGivenName,
            'emailAddress' => $spSupportEmailAddress
        ),
    ),

    // Organization information template, the info in en_US lang is recomended, add more if required
    'organization' => array (
        'en-US' => array(
            'name' => 'XerteOnlineToolkits',
            'displayname' => 'Xerte Online Toolkits',
            'url' => "$protocol://host"
        ),
    ),

/* Interoperable SAML 2.0 Web Browser SSO Profile [saml2int]   http://saml2int.org/profile/current

   'authnRequestsSigned' => false,    // SP SHOULD NOT sign the <samlp:AuthnRequest>,
                                      // MUST NOT assume that the IdP validates the sign
   'wantAssertionsSigned' => true,
   'wantAssertionsEncrypted' => true, // MUST be enabled if SSL/HTTPs is disabled
   'wantNameIdEncrypted' => false,
*/

);
                       
