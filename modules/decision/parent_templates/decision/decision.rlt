	<LO language="en-GB" description="A flexible template for creating interactive learning objects" targetFolder="Nottingham" version="1.0" styleSheet="templatePath + 'common/styles.css'" inputColour="0xFFFFCC" selectableText="1" templateData="FileLocation + 'template.xml'" name="Xerte Online Toolkit">		<SCR name="makePages"><![CDATA[//loop through the xml and insert a page of the right type for each page typeifc = icon.nextSibling;linkIndex = -1;if (templateData.learningObject[0].navigation.indexOf('Menu') != -1 && templateData.learningObject[0].navigation != undefined ){  pgOffset = 2;  newXML = new XML('<PG model="templatePath + \'models/menu.rlm\'"/>');  newChild = newXML.firstChild;  newChild.attributes.title = 'Main Menu';  newChild.attributes.linkID = extXML.firstChild.childNodes[i].attributes.linkID;      ifc.appendChild(newChild);  } else {  pgOffset = 1;}//custom interfaceif (templateData.learningObject[0].controller != undefined){  icon.nextSibling.attributes.swf = templateData.learningObject[0].controller;  icon.nextSibling.attributes.visuals = 0;}//help fileif (templateData.learningObject[0].nfo != undefined){  icon.nextSibling.attributes.helpfile = templateData.learningObject[0].nfo;}//default text sizeif (templateData.learningObject[0].textSize != undefined){  STYLES.defaultSize = templateData.learningObject[0].textSize;  STYLES.inputSize = templateData.learningObject[0].textSize;}//change page title size for all pages if optional property setif (templateData.learningObject[0].allpagestitlesize != undefined){  STYLES.pageTitleSize = templateData.learningObject[0].allpagestitlesize;}//media/transcript filesif (templateData.learningObject[0].media != undefined){  icon.nextSibling.attributes.mediafile = templateData.learningObject[0].media;  if (templateData.learningObject[0].mediaImage != undefined){    icon.nextSibling.attributes.mediaImage = templateData.learningObject[0].mediaImage;  }  if (templateData.learningObject[0].mediaTranscript != undefined){    icon.nextSibling.attributes.mediaTranscript = templateData.learningObject[0].mediaTranscript;  }}for (i = 0; i < extXML.firstChild.childNodes.length; i++){  //build this file dynamically  modName = extXML.firstChild.childNodes[i].nodeName;    if (modName == 'xerteModel'){    newXML = new XML('<PG model="' + extXML.firstChild.childNodes[i].attributes.modelFile + '"/>');    //is there an initObject...?    if (extXML.firstChild.childNodes[i].attributes.initObject != undefined){      newXML.firstChild.attributes.initObject = extXML.firstChild.childNodes[i].attributes.initObject;    }  } else {    newXML = new XML('<PG model="templatePath + \'models/' + modName + '.rlm\'"/>');  }  newChild = newXML.firstChild;  newChild.attributes.title = extXML.firstChild.childNodes[i].attributes.name;  newChild.attributes.linkID = extXML.firstChild.childNodes[i].attributes.linkID;    if (extXML.firstChild.childNodes[i].attributes.linkID == _level0.linkID && extXML.firstChild.childNodes[i].attributes.linkID != undefined){    linkIndex = i;  }  ifc.appendChild(newChild);}//glossaryif (templateData.learningObject[0].glossary != undefined){  Glossary.enabled = true;  items = templateData.learningObject[0].glossary.split('||');  for (i = 0; i < items.length; i++){    Glossary.addTerm(items[i].split('|')[0], items[i].split('|')[1]);  }}]]></SCR>		<IFC name="interface" title="rtryr" visuals="1">			<FW_ENT id="entryFrame" name="background">				<SCR name="backgroundImage"><![CDATA[if (templateData.learningObject[0].background != undefined){  if(templateData.learningObject[0].backgroundopacity != undefined){    alpha = templateData.learningObject[0].backgroundopacity;  } else {    alpha = 15;  }  rootIcon.loadBackground(templateData.learningObject[0].background, alpha);}//stylesheetif (templateData.learningObject[0].stylesheet != undefined){  loadingStyles = true;  rootIcon.loadStyleSheet(expression(templateData.learningObject[0].stylesheet, this));}]]></SCR>				<SCR isFunc="1" name="fnSetInterfaceControls"><![CDATA[// fnSetInterfaceControls(navigationAttribute,thisPageNav)if (args[0] != undefined){  navAtt = args[0];} else {  navAtt = "Linear";}  if (args[1] != undefined){  pageNav = args[1];} else {  pageNav = "all";}   switch (navAtt) {  case "Linear": // back, toc, next    switch (pageNav){      case "none":        rootIcon.tocBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(0);        rootIcon.nextBtn.setEnabled(0);        rootIcon.contButton.setEnabled(0);                        break;      case "backnext":        rootIcon.tocBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(1);        rootIcon.nextBtn.setEnabled(1);        rootIcon.contButton.setEnabled(1);                              break;      case "backonly":        rootIcon.tocBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(1);        rootIcon.nextBtn.setEnabled(0);        rootIcon.contButton.setEnabled(0);       break;      case "nextonly":        rootIcon.tocBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(0);        rootIcon.nextBtn.setEnabled(1);        rootIcon.contButton.setEnabled(1);          break;      default: // all        rootIcon.tocBtn.setEnabled(1);         rootIcon.backBtn.setEnabled(1);        rootIcon.nextBtn.setEnabled(1);        rootIcon.contButton.setEnabled(1);      break;              }      break;  case "Menu with Page Controls": // back, toc, next    switch (pageNav){      case "none":        rootIcon.tocBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(0);        rootIcon.nextBtn.setEnabled(0);        rootIcon.contButton.setEnabled(0);                        break;      case "backnext":        rootIcon.tocBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(1);        rootIcon.nextBtn.setEnabled(1);        rootIcon.contButton.setEnabled(1);                              break;      case "backonly":        rootIcon.tocBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(1);        rootIcon.nextBtn.setEnabled(0);        rootIcon.contButton.setEnabled(0);       break;      case "nextonly":        rootIcon.tocBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(0);        rootIcon.nextBtn.setEnabled(1);        rootIcon.contButton.setEnabled(1);          break;      default: // all        rootIcon.tocBtn.setEnabled(1);         rootIcon.backBtn.setEnabled(1);        rootIcon.nextBtn.setEnabled(1);        rootIcon.contButton.setEnabled(1);      break;              }      break;  case "Historic": // home, historic back, next    switch (pageNav){      case "none":        rootIcon.homeBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(0);        rootIcon.nextBtn.setEnabled(0);        rootIcon.contButton.setEnabled(0);             break;      case "backnext":        rootIcon.homeBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(1);        rootIcon.nextBtn.setEnabled(1);          rootIcon.contButton.setEnabled(1);                                       break;      case "backonly":        rootIcon.homeBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(1);        rootIcon.nextBtn.setEnabled(0);         rootIcon.contButton.setEnabled(0);                  break;      case "nextonly":        rootIcon.homeBtn.setEnabled(0);         rootIcon.backBtn.setEnabled(0);        rootIcon.nextBtn.setEnabled(1);         rootIcon.contButton.setEnabled(1);                     break;      default: // all        rootIcon.homeBtn.setEnabled(1);         rootIcon.backBtn.setEnabled(1);        rootIcon.nextBtn.setEnabled(1);        rootIcon.contButton.setEnabled(1);      break;                           }      default: // menu no controls    // no action required  break;}]]></SCR>				<SCR isFunc="1" name="navToPage"><![CDATA[for (i = 0; i < extXML.firstChild.childNodes.length; i++){  if (extXML.firstChild.childNodes[i].attributes.name == args[0]){    if (pgOffset == 2){        rootIcon.gotoPage(i+1);    } else {      rootIcon.gotoPage(i);    }  }}]]></SCR>				<SCR name="setup"><![CDATA[if (templateData.learningObject[0].ic != undefined){  rootIcon.loadIcon(expression(templateData.learningObject[0].ic, engine));}entryFrame.swapDepths(999);btnPos = new Array;btnPos[0] = new Array(740, 690, 640, 590, 540); // used by all navigation values other than historicbtnPos[1] = new Array(740, 690, 630, 520, 465); // used by the historic navigation styleif (templateData.learningObject[0].navigation != undefined){  navigationAttribute = templateData.learningObject[0].navigation;} else {  navigationAttribute = "Linear";}  switch (templateData.learningObject[0].navigation) {  case "Linear":     icon.nextSibling.firstChild.removeNode();    navArrayIndex = 0;    // default state so no more to do       break;      case "Historic":    icon.nextSibling.firstChild.removeNode();    rootIcon.setNavigationStyle("menu");  // enables historic back button    // turn off what you don't want    rootIcon.progBG._visible = false;    rootIcon.progress._visible = false;    rootIcon.tocBtn._visible = false;    rootIcon.mask14._visible = false;    rootIcon.maskee14._visible = false;          // then set up what you want     currentBtn = 0;    navArrayIndex = 1;           buttonY = rootIcon.nextBtn._y;           rootIcon.nextBtn.move(btnPos[navArrayIndex][currentBtn],buttonY);     currentBtn++;        rootIcon.backBtn.move(btnPos[navArrayIndex][currentBtn],buttonY);    currentBtn++;    rootIcon.addHomeButton(btnPos[navArrayIndex][currentBtn],buttonY];    currentBtn++;  break;  case "Menu":    currentBtn = 0;    navArrayIndex = 0;    rootIcon.hideControls();    rootIcon.tocBtn._visible = true;    rootIcon.tocBtn._x = btnPos[navArrayIndex][currentBtn];    toc = rootIcon.tocBtn;    currentBtn++;      break;      default: // menu with page controls    navArrayIndex = 0;           currentBtn = 0;     rootIcon.hideControls();    rootIcon.nextBtn._visible = true;    rootIcon.nextBtn._x = btnPos[navArrayIndex][currentBtn];    currentBtn++;      rootIcon.tocBtn._visible = true;    rootIcon.tocBtn._x = btnPos[navArrayIndex][currentBtn];    toc = rootIcon.tocBtn;    currentBtn++;            rootIcon.backBtn._visible = true;    rootIcon.backBtn._x = btnPos[navArrayIndex][currentBtn];    currentBtn++;  break;}// add help button if specifiedif (templateData.learningObject[0].nfo != undefined){  rootIcon.helpBtn._visible = true;  rootIcon.helpBtn._x = btnPos[navArrayIndex][currentBtn];  currentBtn++;}// add media button if specified    if (templateData.learningObject[0].media != undefined) {  rootIcon.mediaBtn._visible = true;  rootIcon.mediaBtn._x = btnPos[navArrayIndex][currentBtn];}]]></SCR>				<INT id="myInt" name="narrationHandlers" perpetual="1">					<RES name="mainMenu" type="event" eventName="onRelease" icon="rootIcon.tocBtn" erase="1" exit="0">						<SCR name="gotoMenu"><![CDATA[rootIcon.gotoPage(0);]]></SCR>					</RES>					<RES name="showAudio" type="event" eventName="showAudio" icon="rootIcon" erase="1" exit="0">						<SND id="nar" controls="25,0,975" name="narration" type="ext" url="{narration}" play="0" loop="0" wait="0" />						<SCR name="setup"><![CDATA[nar._y = -14;nar._x = 0;nar._yscale =  80;nar._xscale =  80;nar.clear();nar.beginFill(STYLES.titleBarColour,100);nar.drawRect(22,0,130,20);]]></SCR>						<INT name="handleAutoNaviagate" perpetual="0">							<RES name="onLoad" type="event" eventName="onLoad" icon="nar" erase="1" exit="0">								<SCR name="onLoad"><![CDATA[//play automatically?if (myXML.firstChild.attributes.playNarration == 'true'){  nar.play();}]]></SCR>							</RES>							<RES name="onSoundComplete" type="event" eventName="onSoundComplete" icon="nar" erase="1" exit="0">								<SCR name="moveOn"><![CDATA[if (myXML.firstChild.attributes.narrationNavigate == 'true'){  rootIcon.nextPage();}]]></SCR>							</RES>						</INT>					</RES>					<RES name="killPopUps" type="event" eventName="onClosePage" icon="rootIcon" erase="1" exit="0">						<SCR name="hideNarration"><![CDATA[if (popupActive == true){  callJS("killPopUp");  popupActive = false;}]]></SCR>					</RES>				</INT>				<COM id="cpad" name="characterPad" url="templatePath + 'common/charPad.swf'" initObject="{language: templateData.learningObject[0].kblanguage}" />				<DIS id="link" name="link" x="0" y="0" type="ext" url="templatePath + 'common/link.png'"><![CDATA[]]></DIS>				<INT name="onInitHandler" perpetual="0">					<RES name="onInit" type="event" eventName="onInit" icon="rootIcon" erase="1" exit="0">						<SCR name="jump"><![CDATA[rootIcon.preloadMedia();if (templateData.learningObject[0].displayMode != undefined){  rootIcon.setDisplayMode(templateData.learningObject[0].displayMode);}if (linkIndex != -1){  rootIcon.gotoPage(linkIndex);}]]></SCR>					</RES>					<RES name="onInitComplete" type="event" eventName="onInitComplete" icon="rootIcon" erase="1" exit="0">						<SCR name="setup Optional Navigation"><![CDATA[// navigationAttribute is setup in earlier setup script// set a default value for navigation for the current page if none definedif (navigationAttribute.indexOf('Menu') != -1){  currentPageOffset = 1;} else {  currentPageOffset = 0;}if (extXML.firstChild.childNodes[rootIcon.currentPage - currentPageOffset].attributes.navSetting != undefined){  thisPageNav = extXML.firstChild.childNodes[rootIcon.currentPage - currentPageOffset].attributes.navSetting;} else {  thisPageNav = "all";}fnSetInterfaceControls(navigationAttribute,thisPageNav); ]]></SCR>						<SCR name="check for url parameter"><![CDATA[//code for page=x// only want to redirect once so check if redirect already doneif (rootIcon.urlRedirectDone == undefined){  // only check if not in preview mode  debug(_level0jumpData.fileType);  if (_level0jumpData.fileType == undefined){      // is there a page value in the url?   destinationPage = callJS("getUrlParam","page");    if (destinationPage != "null" && destinationPage !=undefined){      // we have a page number      if (rootIcon.pages.length > 1){        // we have a fully populated page list         //reduce number found in url by 1 to match array         destinationPage = destinationPage-1;           // flag redirect as done then go to destination page 	       rootIcon.urlRedirectDone = 1;           rootIcon.gotoPage(destinationPage); 		       break;        }      }    }   }//code for linkID=xif (rootIcon.urlRedirectDone == undefined){  // only check if not in preview mode  if (_level0jumpData.fileType == undefined){    destinationLinkID = callJS("getUrlParam","linkID");   // check for linkID    if (destinationLinkID != "null" && destinationLinkID !=undefined){      // we have a linkID      if (rootIcon.pages.length > 1){        // we have a fully populated page list so find and go to page.        // navigate to destination page        destinationLinkID = destinationLinkID.toString();        for (i = 0; i < rootIcon.pages.length; i++){          if (extXML.firstChild.childNodes[i].attributes.linkID == destinationLinkID){           pageFound = "true";		       destinationIndex = i;           // go to destination page 	       rootIcon.urlRedirectDone = 1;           rootIcon.gotoPage(destinationIndex); 		       break;        }      }    }   }  }    //code for pageID=x for existing LO's with connectors etc before change to linkIDif (rootIcon.urlRedirectDone == undefined){  // only check if not in preview mode  if (_level0jumpData.fileType == undefined){    destinationPageID = callJS("getUrlParam","pageID");   //check for pageID    if (destinationPageID != "null" && destinationPageID !=undefined){      // we have a pageID      if (rootIcon.pages.length > 1){        // we have a fully populated page list so find and go to page.        // navigate to destination page        destinationPageID = destinationPageID.toString();        for (i = 0; i < rootIcon.pages.length; i++){          if (extXML.firstChild.childNodes[i].attributes.pageID == destinationPageID){           pageFound = "true";		       destinationIndex = i;           // go to destination page 	       rootIcon.urlRedirectDone = 1;           rootIcon.gotoPage(destinationIndex); 		       break;        }      }    }   } }]]></SCR>					</RES>					<RES name="onThemeChange" type="event" eventName="onThemeChange" icon="rootIcon" erase="1" exit="0">						<SCR name="loadingStyles"><![CDATA[if (loadingStyles == true){  loadingStyles = false;  rootIcon.broadcast('onAccessSet');}  ]]></SCR>						<DIS id="accessPrompt" h="150" w="200" name="accessPrompt" x="300" y="200" type="ext" url="templatePath + 'common/whitePanel.swf'"><![CDATA[]]></DIS>						<DIS textColour="#000000" name="prompt" x="accessPrompt._x + 20" y="accessPrompt._y + 20" w="160" h="10" type="text"><![CDATA[<b>Colour Changes</b>]]></DIS>						<INT name="applyGlobalAccessibility" perpetual="1">							<RES textColour="#000000" w="170" rs="chkSubPage" name="subPageAccess" type="checkBox" x="accessPrompt._x + 20" y="accessPrompt._y+ 60" label="Apply colour changes to sub-pages" erase="1" exit="0">								<SCR name="setSubAccess"><![CDATA[if (chkSubPage.getValue() == true){  subPageAccess = true;} else {  subPageAccess = false;}//only refresh the page for pages with nestPages as children.if (String(extXML.firstChild.childNodes[rootIcon.currentPage + 1 - pgOffset]).indexOf('nestedPage') != -1){  rootIcon.refreshPage(false);}]]></SCR>							</RES>							<RES w="80" name="Close" type="button" x="icon.previousSibling.clip()._x + 40" y="_ytile + 30" label="Close" erase="1" exit="1">								<SCR name="exit"><![CDATA[rootIcon.broadcast('onAccessSet');]]></SCR>							</RES>						</INT>						<SCR name="setValue"><![CDATA[if (subPageAccess == true){  chkSubPage.setValue(true);}]]></SCR>					</RES>					<RES name="onAccessSet" type="event" eventName="onAccessSet" icon="rootIcon" erase="1" exit="0">						<SCR name="doNothing"><![CDATA[//do nothing here]]></SCR>					</RES>					<RES name="onOpenPage" type="event" eventName="onOpenPage" icon="rootIcon" erase="1" exit="0">						<SCR name="setup Optional Navigation"><![CDATA[// navigationAttribute is setup in earlier setup script// set a default value for navigation for the current page if none definedif (navigationAttribute.indexOf('Menu') != -1){  currentPageOffset = 1;} else {  currentPageOffset = 0;}if (extXML.firstChild.childNodes[rootIcon.currentPage - currentPageOffset].attributes.navSetting != undefined){  thisPageNav = extXML.firstChild.childNodes[rootIcon.currentPage - currentPageOffset].attributes.navSetting;} else {  thisPageNav = "all";}fnSetInterfaceControls(navigationAttribute,thisPageNav);  ]]></SCR>						<SCR name="setupTimer"><![CDATA[if (extXML.firstChild.childNodes[rootIcon.currentPage].attributes.timer != undefined){  rootIcon.showPageTimer(extXML.firstChild.childNodes[rootIcon.currentPage].attributes.timer);}]]></SCR>					</RES>					<RES name="link" type="hotObject" rs="link" click="1" cursor="1" erase="1" exit="0">						<SCR name="getLink"><![CDATA[linkID = extXML.firstChild.childNodes[rootIcon.currentPage].attributes.linkID;httpStr = callJS(' function(){ return document.location.href.toString();}'); if (httpStr.indexOf('?') == -1){  deepLink = httpStr + '?linkID=' + linkID;} else {  deepLink = httpStr + '&linkID=' + linkID;}System.setClipboard(deepLink);]]></SCR>					</RES>				</INT>			</FW_ENT>		</IFC>		<BIN myLongVarName="A variable for tracking the user" name="Deleted Items" />	</LO>